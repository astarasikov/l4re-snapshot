// vim:set ft=cpp:
/*
 * (c) 2009-2010 Adam Lackorzynski <adam@os.inf.tu-dresden.de>,
 *               Alexander Warg <warg@os.inf.tu-dresden.de>
 *     economic rights: Technische Universit√§t Dresden (Germany)
 *
 * This file is part of TUD:OS and distributed under the terms of the
 * GNU General Public License 2.
 * Please see the COPYING-GPL-2 file for details.
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 */

#include <l4/sys/irq>
#include <l4/sys/factory>
#include <l4/re/env>
#include <l4/re/util/cap_alloc>
#include <pthread-l4.h>

namespace Event {

class Event
{
public:

  Event(L4::Cap<L4::Irq> const irq, pthread_t thread = 0)
    : _irq(irq), _pthread(0)
  {
    pthread_mutex_init(&_wait_lock, 0);
    attach_thread(thread);
  }

  template < typename GI >
  Event(GI *gi, pthread_t thread = 0)
    : _pthread(0)
  {
    pthread_mutex_init(&_wait_lock, 0);
    _irq = L4Re::Util::cap_alloc.alloc<L4::Irq>();
    if (!_irq.is_valid())
      return;

    if (l4_error(L4Re::Env::env()->factory()->create_irq(_irq)) < 0)
      {
	L4Re::Util::cap_alloc.free(_irq);
	_irq.invalidate();
	return;
      }

    if (gi->bind_irq(0, _irq) < 0)
      {
	L4Re::Util::cap_alloc.free(_irq, L4Re::This_task);
	_irq.invalidate();
	return;
      }

    attach_thread(thread);
  }

  template < typename HANDLER >
  Event(L4::Cap<L4::Irq> const irq, HANDLER const &handler,
        void *data, int prio)
    : _irq(irq), _pthread(0)
  {
    pthread_mutex_init(&_wait_lock, 0);
    if (create_handler(handler, data, prio))
      _irq.invalidate();
    else
      attach_thread(_pthread);
  }


  ~Event();

  L4::Cap<L4::Irq> irq() const { return _irq; }
  bool attached() const { return _irq.is_valid(); }

  int wait()
  {
    pthread_mutex_lock(&_wait_lock);

    L4::Cap<L4::Thread> t(pthread_getl4cap(pthread_self()));

    if (_l4thread != t)
      {
	_irq->detach();
	_l4thread = t;
	attach();
      }

    int ret = l4_error(_irq->receive());

    pthread_mutex_unlock(&_wait_lock);
    return ret;
  }

private:
  L4::Cap<L4::Irq>    _irq;
  L4::Cap<L4::Thread> _l4thread;
  pthread_t           _pthread;
  pthread_mutex_t     _wait_lock;
  void                (*_event_func)(void *);
  void               *_data;

  static void *event_loop(void *);

  void attach() { _irq->attach(12, _l4thread); }

  template < typename EVENT_HANDLER >
  int
  create_handler(EVENT_HANDLER const &handler, void *data,
                 int thread_prio)
  {
    _event_func = handler;
    _data       = data;

    pthread_attr_t a;
    pthread_attr_init(&a);
    if (thread_prio != -1)
      {
	struct sched_param sp;
	sp.sched_priority = thread_prio;
	pthread_attr_setschedpolicy(&a, SCHED_L4);
	pthread_attr_setschedparam(&a, &sp);
	pthread_attr_setinheritsched(&a, PTHREAD_EXPLICIT_SCHED);
      }
    else
      pthread_attr_setinheritsched(&a, PTHREAD_INHERIT_SCHED);

    if (pthread_create(&_pthread, &a, event_loop, this))
      return -1;

    return 0;
  }

  void attach_thread(pthread_t thread);
};

}
