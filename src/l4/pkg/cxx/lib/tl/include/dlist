// vi:ft=cpp
/*
 * (c) 2011 Alexander Warg <warg@os.inf.tu-dresden.de>
 *     economic rights: Technische Universit√§t Dresden (Germany)
 *
 * This file is part of TUD:OS and distributed under the terms of the
 * GNU General Public License 2.
 * Please see the COPYING-GPL-2 file for details.
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 */

#pragma once

namespace cxx {

template< typename T > class D_list;

template< typename T >
class D_list_item_base
{
private:
  friend class D_list<T>;
  D_list_item_base *_n, *_p;

public:
  explicit D_list_item_base(D_list_item_base *n = 0, D_list_item_base *p = 0)
  : _n(n), _p(p) {}

  T *l_next() const { return static_cast<T*>(_n); }
  T *l_prev() const { return static_cast<T*>(_p); }

  void l_remove()
  {
    if (_p) _p->_n = _n;
    if (_n) _n->_p = _p;
    _n = 0;
    _p = 0;
  };

  void l_add_before(D_list_item_base *other)
  {
    _p = other->_p;
    _n = other;
    other->_p->_n = this;
    other->_p = this;
  }

  void l_add_after(D_list_item_base *other)
  {
    _p = other;
    _n = other->_n;
    if (other->_n) other->_n->_p = this;
    other->_n = this;
  }

  ~D_list_item_base() { l_remove(); }
};


template< typename T >
class D_list_item : private D_list_item_base<T>
{
private:
  friend class D_list<T>;
  friend class D_list_item_base<T>;
  typedef D_list_item_base<T> B;

public:
  using B::l_prev;
  using B::l_next;
  using B::l_remove;
  void l_add_before(T *other) { B::l_add_before(other); }
  void l_add_after(T *other) { B::l_add_after(other); }
};

template< typename T >
class D_list : private D_list_item_base<T>
{
private:
  friend class D_list_item_base<T>;
  typedef D_list_item_base<T> B;

public:
  typedef T Item;

  D_list() : B(this, this)
  {}

  explicit D_list(T *first) : B(first, first)
  {
    if (first)
      {
	B::_n->_n = this;
	B::_n->_p = this;
      }
  }

  T *first() const { return B::_n != this  ? B::l_next() : 0; }
  T *last() const { return B::_p != this  ? B::l_prev() : 0; }

  void add(T *e) { e->D_list_item_base<T>::l_add_after(this); }
  void add_tail(T *e) { e->D_list_item_base<T>::l_add_before(this); }

  T* next(T const *current) const
  { return current->_n != this ? current->l_next() : 0; }

  T* prev(T const *current) const
  { return current->_p != this ? current->l_prev() : 0; }
};


}
