// vi:ft=cpp
#pragma once

#include <lua.h>
#include <lauxlib.h>
#include <lualib.h>
#include <new>


namespace Mag_server {

template< typename T >
T *lua_check_class(lua_State *l, int i)
{ return (T*)luaL_checkudata(l, i, T::_class); }


template< typename T >
static int lua_gc_class(lua_State *l)
{
  T *o = lua_check_class<T>(l, 1);
  o->~T();
  return 0;
}

template< typename T >
struct Lua_register_ops
{
  static void init(lua_State *l)
  {
    luaL_register(l, NULL, T::_ops);
  }
};

template< typename T >
static T *lua_alloc_class(lua_State *l)
{
  T *r = new (lua_newuserdata(l, sizeof(T))) T();
  if (luaL_newmetatable(l, T::_class))
    {
      lua_pushcfunction(l, &lua_gc_class<T>);
      lua_setfield(l, -2, "__gc");

      lua_newtable(l);
      Lua_register_ops<T>::init(l);
      lua_setfield(l, -2, "__index");
    }
  lua_setmetatable(l, -2);
  return r;
}

template< typename T, typename A >
static T *lua_alloc_class(lua_State *l, A const &a)
{
  T *r = new (lua_newuserdata(l, sizeof(T))) T(a);
  if (luaL_newmetatable(l, T::_class))
    {
      lua_pushcfunction(l, &lua_gc_class<T>);
      lua_setfield(l, -2, "__gc");
      lua_newtable(l);
      Lua_register_ops<T>::init(l);
      lua_setfield(l, -2, "__index");
    }
  lua_setmetatable(l, -2);
  return r;
}

}
