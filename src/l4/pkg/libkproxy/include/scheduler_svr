// vi:ft=cpp
/**
 * \internal
 * \file
 * \brief L4::Scheduler server interface
 */
/*
 * (c) 2008-2009 Adam Lackorzynski <adam@os.inf.tu-dresden.de>,
 *               Alexander Warg <warg@os.inf.tu-dresden.de>
 *     economic rights: Technische Universit√§t Dresden (Germany)
 *
 * This file is part of TUD:OS and distributed under the terms of the
 * GNU General Public License 2.
 * Please see the COPYING-GPL-2 file for details.
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 */
#include <l4/sys/scheduler>
#include <l4/cxx/ipc_stream>

namespace L4kproxy {

class Scheduler_interface
{
public:
  virtual int info(l4_umword_t *cpu_max, l4_sched_cpu_set_t *cpus) = 0;

  virtual int run_thread(L4::Cap<L4::Thread> thread,
                         l4_sched_param_t const &sp) = 0;

  virtual int idle_time(l4_sched_cpu_set_t const &cpus) = 0;

  virtual ~Scheduler_interface() {}

};

class Scheduler_svr
{
public:
  Scheduler_svr(Scheduler_interface *sched)
    : _sched(sched) {}
  int scheduler_dispatch(l4_umword_t, L4::Ipc::Iostream &ios);
  virtual L4::Cap<L4::Thread> received_thread(L4::Ipc::Snd_fpage const &fp) = 0;
  virtual ~Scheduler_svr() {}

private:
  Scheduler_interface *_sched;
};

}
