#! /bin/bash

# This scripts sets up a snapshot on the target build machine.

set -e

# check we're in the right directory
if [ ! -d src/l4 -o ! -d src/kernel/fiasco ]; then
  echo "Call setup as ./$(basename $0) in the right directory"
  exit 1
fi

if [ -n "$SYSTEM" ]; then
  echo "SYSTEM environment variable set, not good"
  exit 1
fi

CC=${CROSS_COMPILE}gcc
CXX=${CROSS_COMPILE}g++

add_to_config()
{
  echo "$@" >> obj/.config
}

write_config()
{
  # write out config, fresh version
  mkdir -p obj
  echo '# snapshot build configuration' > obj/.config
  [ "$CONF_DO_X86_32" ] && add_to_config CONF_DO_X86_32=1
  [ "$CONF_DO_UX" ]  && add_to_config CONF_DO_UX=1
  [ "$CONF_DO_AMD64" ]  && add_to_config CONF_DO_AMD64=1
  [ "$CONF_DO_ARM" ] && add_to_config CONF_DO_ARM=1
  [ "$CONF_DO_ARM_RV" ] && add_to_config CONF_DO_ARM_RV=1
  [ "$CONF_DO_ARM_OMAP3_EVM" ] && add_to_config CONF_DO_ARM_OMAP3_EVM=1
  [ "$CONF_DO_ARM_OMAP3_BB" ] && add_to_config CONF_DO_ARM_OMAP3_BB=1

  [ "$CONF_FAILED_ARM" ] && add_to_config CONF_FAILED_ARM=1
  [ "$CONF_FAILED_UX" ] && add_to_config CONF_FAILED_UX=1
  [ "$CONF_FAILED_AMD64" ] && add_to_config CONF_FAILED_AMD64=1

  return 0
}

do_clean()
{
  # same as in Makefile
  rm -rf obj
}

do_config()
{
  if command -v dialog; then

    tmpfile=`tempfile 2>/dev/null` || tmpfile=/tmp/test$$
    trap "rm -f $tmpfile" 0 1 2 5 15

    dialog \
      --begin 2 10 \
	--infobox \
	 "The list of choices represents a popular set of target platforms.  Many more are available." \
	 5 60 \
      --and-widget --begin 9 10 \
	--checklist "Select Targets to build:" 11 60 4 \
	 x86-32    "ia32"                                      off \
	 UX-32     "  add Fiasco-UX-32 (selects x86-32)"       off \
	 amd64     "amd64/x86_64 "                             off \
	 arm       "ARM Platform (platform selection follows)" off \
	 2> $tmpfile

    result=$(cat $tmpfile)

    for e in $result; do
      # fixup for older dialogs
      [ "${e#\"}" = "$e" ] && e="\"$e\""
      case "$e" in
	\"x86-32\") CONF_DO_X86_32=1 ;;
	\"UX-32\") CONF_DO_UX=1; CONF_DO_X86_32=1 ;;
	\"amd64\") CONF_DO_AMD64=1 ;;
	\"arm\") CONF_DO_ARM=1 ;;
      esac
    done

    if [ -n "$CONF_DO_ARM" ]; then
      dialog \
	--begin 2 10 \
	  --infobox \
	   "The list of choices represents a popular set of target platforms.  Many more are available." \
	   5 60 \
	--and-widget --begin 9 10 \
	  --checklist "Select ARM Targets to build:" 10 60 3 \
	   arm-rv        "Realview"       off \
	   arm-omap3-evm "OMAP3EVM"       off \
	   arm-omap3-bb  "Beagleboard"    off \
	   2> $tmpfile

      result=$(cat $tmpfile)

      for e in $result; do
	# fixup for older dialogs
	[ "${e#\"}" = "$e" ] && e="\"$e\""
	case "$e" in
	  \"arm-rv\") CONF_DO_ARM_RV=1 ;;
	  \"arm-omap3-evm\") CONF_DO_ARM_OMAP3_EVM=1 ;;
	  \"arm-omap3-bb\") CONF_DO_ARM_OMAP3_BB=1 ;;
	esac
      done
    fi

  else

    echo "'dialog' program not found,"
    echo "press ENTER to continue and select everything, or"
    echo "abort with Ctrl-C, install dialog and issue 'make setup' again."
    read 

    CONF_DO_X86_32=1
    CONF_DO_UX=1
    CONF_DO_AMD64=1
    CONF_DO_ARM=1
    CONF_DO_ARM_RV=1
    CONF_DO_ARM_OMAP3_EVM=1
    CONF_DO_ARM_OMAP3_BB=1
  fi

  write_config
  return 0;
}

###########################################################

load_config()
{
  if [ ! -e obj/.config ]; then
    echo "Configuration missing, not configured?!"
    exit 1
  fi

  . obj/.config
}

redo_config()
{
  if [ -n "$CONF_FAILED_ARM" ]; then
    unset CONF_DO_ARM
    add_to_config "unset CONF_DO_ARM"
    unset CONF_DO_ARM_RV
    unset CONF_DO_ARM_OMAP3_EVM
    unset CONF_DO_ARM_OMAP3_BB
  fi

  if [ -n "$CONF_FAILED_UX" ]; then
    unset CONF_DO_UX
    add_to_config "unset CONF_DO_UX"
  fi

  if [ -n "$CONF_FAILED_AMD64" ]; then
    unset CONF_DO_AMD64
    add_to_config "unset CONF_DO_AMD64"
  fi
}

check_cc()
{
  if [ -n "$1" ]; then
    if echo 'int main(void) { return 0; }' | $1 $2 -c -x c - -o /dev/null; then
      return 0
    fi
  else
    echo "Invalid compiler command given"
  fi
  return 1
}

check_eabi_gcc()
{
  # probably half-hearted approach but well
  [ -z "$1" ] && return 1
  $1 -E -dD -x c /dev/null | grep -qw __ARM_EABI__
}

check_tool()
{
  command -v $1 > /dev/null
  if ! command -v $1 > /dev/null;  then
    return 1
  fi

  case "$1" in
    *gcc|*g++)
      check_cc "$1" "$2"
      return $?
    ;;
    make|*ld)
      $1 -v > /dev/null 2>&1
      return $?
    ;;
    *cpp|*nm)
      $1 --help > /dev/null 2>&1
      return $?
    ;;
    gawk)
      $1 --help > /dev/null 2>&1
      return $?
    ;;
    perl)
      $1 -V > /dev/null 2>&1
      return $?
    ;;
    doxygen)
      doxygen | grep "Doxygen ver" > /dev/null 2>&1
      return $?
    ;;
    qemu-system-arm)
      $1 -h > /dev/null 2>&1
      return $?
    ;;
    pkg-config)
      $1 --help > /dev/null 2>&1
      return $?
    ;;
    *)
      echo "Unknown tool $1"
      return 1
    ;;
  esac
}

check_tools()
{
# Generic tools
  echo "Checking for needed programs and tools"
  tools_needed="make ${CC} ${CXX} ld gawk perl pkg-config"
  for t in $tools_needed; do
    result="ok"
    if ! check_tool $t; then
      result="NOT DETECTED"
      command_missing="$command_missing $t"
    fi
    printf "%15s ... %s\n" $t "$result"
  done
  echo
  if [ -n "$command_missing" ]; then
    echo "Some command is missing on your system."
    echo "Please install it before continuing with 'make setup':"
    echo "   $command_missing"
    do_clean
    exit 1
  fi

  if [ -n "$CONF_DO_AMD64" ]; then
    if ! check_tool ${CC} -m64; then
      echo "AMD64 build disabled as ${CC} does not support 64bit targets"
      CONF_FAILED_AMD64=1
    fi
  fi

  # Target specific tools
  if [ "$CONF_DO_ARM" ]; then
    echo "Checking for needed cross programs and tools"
    tools_needed="arm-linux-gcc arm-linux-cpp arm-linux-nm arm-linux-g++ arm-linux-ld"
    for t in $tools_needed; do
      result="ok"
      if ! check_tool $t; then
	result="Not found or FAILED, disabling ARM builds"
	CONF_FAILED_ARM=1
      fi
      printf "%15s ... %s\n" $t "$result"
      [ -n "$CONF_FAILED_ARM" ] && break
    done
  fi
  echo

  if [ "$CONF_DO_UX" ]; then
    echo "Checking some specific Fiasco-UX build thing on 64bit platforms"
    if ! echo "#include <sys/cdefs.h>" | ${CC} -m32 -x c -c -o /dev/null - > /dev/null 2>&1; then
      result="Failed, disabling Fiasco-UX builds"
      CONF_FAILED_UX=1
    else
      result="ok"
    fi
    printf "%15s ... %s\n" "UX build" "$result"
  fi
  echo

# Optional tools
  echo "Checking optional programs and tools"
  tools_optional="doxygen"
  [ "$CONF_DO_ARM" ] && tools_needed="$tools_needed qemu-system-arm"
  for t in $tools_optional; do
    result="ok"
    if ! check_tool $t; then
      result="NOT DETECTED but optional"
      command_missing="$command_missing $t"
    fi
    printf "%15s ... %s\n" $t "$result"
  done
  echo
  if [ -n "$command_missing" ]; then
    echo "Some optional command is missing on your system, don't worry."
    echo "   $command_missing"
    echo
  fi
}

do_setup()
{

  [ "$CONF_DO_X86_32" ] && fiasco_configs="$fiasco_configs ia32"
  [ "$CONF_DO_X86_32" -a "$CONF_DO_UX" ] && fiasco_configs="$fiasco_configs ux"
  [ "$CONF_DO_AMD64" ] && fiasco_configs="$fiasco_configs amd64"
  [ "$CONF_DO_ARM_RV" ] && fiasco_configs="$fiasco_configs arm-mp-rv-pb11mp arm-up-rv-9"
  [ "$CONF_DO_ARM_OMAP3_EVM" ] && fiasco_configs="$fiasco_configs arm-omap3evm"
  [ "$CONF_DO_ARM_OMAP3_BB" ] && fiasco_configs="$fiasco_configs arm-beagleboard"

  echo "Creating build directories..."

  mkdir -p obj/fiasco
  mkdir -p obj/l4
  mkdir -p obj/l4linux

  # Fiasco build dirs
  for b in $fiasco_configs; do
    (cd src/kernel/fiasco && make B=../../../obj/fiasco/$b)
  done

  # fiasco build dirs with defaults configs
  if [ "$CONF_DO_X86_32" ]; then
    if [ "$CONF_DO_UX" ]; then
      cp src/kernel/fiasco/src/templates/globalconfig.out.ux-1 \
         obj/fiasco/ux/globalconfig.out
    fi
    cp src/kernel/fiasco/src/templates/globalconfig.out.ia32-1 \
       obj/fiasco/ia32/globalconfig.out
  fi
  if [ "$CONF_DO_AMD64" ]; then
    cp src/kernel/fiasco/src/templates/globalconfig.out.amd64-1 \
       obj/fiasco/amd64/globalconfig.out
  fi
  if [ "$CONF_DO_ARM_RV" ]; then
    cp src/kernel/fiasco/src/templates/globalconfig.out.arm-v6-mp-pb \
       obj/fiasco/arm-mp-rv-pb11mp/globalconfig.out
    cp src/kernel/fiasco/src/templates/globalconfig.out.arm-rv-1 \
       obj/fiasco/arm-up-rv-9/globalconfig.out
  fi
  if [ "$CONF_DO_ARM_OMAP3_EVM" ]; then
    cp src/kernel/fiasco/src/templates/globalconfig.out.arm-omap3evm \
       obj/fiasco/arm-omap3evm/globalconfig.out
  fi
  if [ "$CONF_DO_ARM_OMAP3_BB" ]; then
    cp src/kernel/fiasco/src/templates/globalconfig.out.arm-omap3evm \
       obj/fiasco/arm-beagleboard/globalconfig.out
    # beagleboard is nearly omap3evm so we do not have an own config
    perl -n -i -e 'print unless /CONFIG_PF_OMAP3_/' obj/fiasco/arm-beagleboard/globalconfig.out
    echo "# CONFIG_PF_OMAP3_EVM is not set" >> obj/fiasco/arm-beagleboard/globalconfig.out
    echo "CONFIG_PF_OMAP3_BEAGLEBOARD=y"    >> obj/fiasco/arm-beagleboard/globalconfig.out
  fi

  # L4Re build dirs with default configs
  [ "$CONF_DO_X86_32" ] \
    && make -C src/l4 DROPSCONF_DEFCONFIG=mk/defconfig/config.x86 B=../../obj/l4/x86

  [ "$CONF_DO_AMD64" ] \
    && make -C src/l4 DROPSCONF_DEFCONFIG=mk/defconfig/config.amd64 B=../../obj/l4/amd64

  if [ "$CONF_DO_ARM_RV" ]; then
    make -C src/l4 DROPSCONF_DEFCONFIG=mk/defconfig/config.arm-rv B=../../obj/l4/arm-rv
    ARM_L4_DIR_FOR_LX=obj/l4/arm-rv
  fi
  if [ "$CONF_DO_ARM_OMAP3_EVM" ]; then
    make -C src/l4 DROPSCONF_DEFCONFIG=mk/defconfig/config.arm-rv B=../../obj/l4/arm-omap3evm
    perl -p -i -e 's/CONFIG_PLATFORM_ARM_rv=y/# CONFIG_PLATFORM_ARM_rv is not set/' obj/l4/arm-omap3evm/.kconfig
    perl -p -i -e 's/# CONFIG_PLATFORM_ARM_omap3evm is not set/CONFIG_PLATFORM_ARM_omap3evm=y/' obj/l4/arm-omap3evm/.kconfig
    perl -p -i -e 's/CONFIG_CPU_ARM_ARMV5TE=y/# CONFIG_CPU_ARM_ARMV5TE is not set /' obj/l4/arm-omap3evm/.kconfig
    perl -p -i -e 's/# CONFIG_CPU_ARM_ARMV6 is not set/CONFIG_CPU_ARM_ARMV6=y/' obj/l4/arm-omap3evm/.kconfig
    perl -p -i -e 's/CONFIG_CPU=.+/CONFIG_CPU="armv6"/' obj/l4/arm-omap3evm/.kconfig
    make -C obj/l4/arm-omap3evm oldconfig
    if [ -z "$ARM_L4_DIR_FOR_LX" ]; then
      ARM_L4_DIR_FOR_LX=obj/l4/arm-omap3evm
    fi
  fi
  if [ "$CONF_DO_ARM_OMAP3_BB" ]; then
    make -C src/l4 DROPSCONF_DEFCONFIG=mk/defconfig/config.arm-rv B=../../obj/l4/arm-beagleboard
    perl -p -i -e 's/CONFIG_PLATFORM_ARM_rv=y/# CONFIG_PLATFORM_ARM_rv is not set/' obj/l4/arm-beagleboard/.kconfig
    perl -p -i -e 's/# CONFIG_PLATFORM_ARM_beagleboard is not set/CONFIG_PLATFORM_ARM_beagleboard=y/' obj/l4/arm-beagleboard/.kconfig
    perl -p -i -e 's/CONFIG_CPU_ARM_ARMV5TE=y/# CONFIG_CPU_ARM_ARMV5TE is not set /' obj/l4/arm-beagleboard/.kconfig
    perl -p -i -e 's/# CONFIG_CPU_ARM_ARMV6 is not set/CONFIG_CPU_ARM_ARMV6=y/' obj/l4/arm-beagleboard/.kconfig
    perl -p -i -e 's/CONFIG_CPU=.+/CONFIG_CPU="armv6"/' obj/l4/arm-beagleboard/.kconfig
    make -C obj/l4/arm-beagleboard oldconfig
    if [ -z "$ARM_L4_DIR_FOR_LX" ]; then
      ARM_L4_DIR_FOR_LX=obj/l4/arm-beagleboard
    fi
  fi


  # L4Linux build setup
  if [ "$CONF_DO_X86_32" ]; then
    mkdir -p obj/l4linux/ux
    ( cd src/l4linux && make O=../../obj/l4linux/ux x86-ux_defconfig )
    perl -p -i -e 's@^(CONFIG_L4_OBJ_TREE=").*@$1'"$(cd obj/l4/x86 && pwd)"'"@' \
       obj/l4linux/ux/.config
  fi

  if [ "$ARM_L4_DIR_FOR_LX" ]; then
    mkdir -p obj/l4linux/arm-mp obj/l4linux/arm-up
    ( cd src/l4linux && make L4ARCH=arm CROSS_COMPILE=arm-linux- O=../../obj/l4linux/arm-up arm_defconfig )
    perl -p -i -e 's@^(CONFIG_L4_OBJ_TREE=").*@$1'"$(cd $ARM_L4_DIR_FOR_LX && pwd)"'"@' \
       obj/l4linux/arm-up/.config

    ( cd src/l4linux && make L4ARCH=arm CROSS_COMPILE=arm-linux- O=../../obj/l4linux/arm-mp arm-mp_defconfig )
    perl -p -i -e 's@^(CONFIG_L4_OBJ_TREE=").*@$1'"$(cd $ARM_L4_DIR_FOR_LX && pwd)"'"@' \
       obj/l4linux/arm-mp/.config

    if ! check_eabi_gcc arm-linux-gcc; then
      echo "WARNING: L4Linux has been disabled due to a detected old OABI compiler"
      echo "WARNING: Please update your compiler to an EABI version"
      add_to_config SKIP_L4LINUX_ARM_BUILD=1
    fi
  fi

  common_paths=$(pwd)/files:$(pwd)/files/cfg:$(pwd)/src/l4/conf:$(pwd)/src/l4/conf/examples

  # generate Makeconf.local file
  if [ "$CONF_DO_X86_32" ]; then
    cat<<EOF >> obj/l4/x86/Makeconf.local
MODULE_SEARCH_PATH=$(pwd)/obj/fiasco/ia32:$(pwd)/obj/l4linux/ux:$common_paths
      QEMU_OPTIONS=-nographic
EOF
  fi

  if [ "$CONF_DO_AMD64" ]; then
    cat<<EOF >> obj/l4/amd64/Makeconf.local
MODULE_SEARCH_PATH=$(pwd)/obj/fiasco/amd64:$common_paths
         QEMU_OPTIONS=-nographic
EOF
  fi

  
  if [ "$CONF_DO_ARM_RV" ]; then
    # generate Makeconf.local files
    cat<<EOF >> obj/l4/arm-rv/Makeconf.local
MODULE_SEARCH_PATH=$(pwd)/obj/fiasco/arm-up-rv-9:$(pwd)/obj/l4linux/arm-up:$common_paths
EOF
  fi
  if [ "$CONF_DO_ARM_OMAP3_BB" ]; then
    cat<<EOF >> obj/l4/arm-beagleboard/Makeconf.local
MODULE_SEARCH_PATH=$(pwd)/obj/fiasco/arm-beagleboard:$(pwd)/obj/l4linux/arm-up:$common_paths
EOF
  fi
  if [ "$CONF_DO_ARM_OMAP3_EVM" ]; then
    cat<<EOF >> obj/l4/arm-omap3evm/Makeconf.local
MODULE_SEARCH_PATH=$(pwd)/obj/fiasco/arm-omap3evm:$(pwd)/obj/l4linux/arm-up:$common_paths
EOF
  fi
}

link_files()
{
  (cd files/cfg && ln -sf ../../src/l4/pkg/io/config/x86-legacy.devs)
}


case "$1" in
  config)
     do_config
     ;;
  setup)
     load_config
     check_tools
     link_files
     redo_config
     do_setup
     ;;
  *)
     echo "Call $0 [config|setup]"
     exit 1
     ;;
esac

exit 0
